//FINAL & PUBLIC VERSION -- DO NOT EDIT
//PREVIOUSLY TITLED "Platform Game"

//translate to binary for walls (1) and empty spaces (0) of each column of the board
var levelBoards = [[2820233,65667,5575831,8197683,8197043, 8196531,1642673,241713,4165729,2072513,4900893,4214717,7668639,8349647,1009607,287747,1953779,3514337,3489769,2129897,2679233,3138575,273663,1117695],//0
                   [87552,512,174593,131584,131074,262,262156,786584,48, 1048672,1835072,12364800,1879166,8170496,1879166,12581888,1150,8385536,1150,4195328,4195454,5391360,5390462,5391360],//1
                   [541200,4194304,4194304,7306207,4348511,4327503, 4340583,4397171,4689721,4572988,4547391,5058961,5839041,85057,5850689,5063551,4538688,5587264,5587264,5587264,5521728,5554517,5751040,5243178],//2
                   [16728080,4145712,16913,6242832,5194256,6308368, 7291408,6767120,7553552,7946768,8143376,7946768,7553552,6767120,7291408,6308368,7291408,4669968,4407824,4276752,4211216,4243984,4212241,4194816],//3
                   [5603328,32769,2785280,7864320,1591293, 9191429,2383873,3666941,463373,3363333,89872,3686674,949234,2122546,3825946,656782,11013318,11409506,10957360,10609177,12059145,9429513,8404537,14680065],//4
                   [0,8388593,1073,4187536,36113,40209,48400,12561, 29009,29008,2126161,29041,24880,28433,25617,25616,25617,26097,25856,19713,22897,20753,4183953,4145],//5
                   [0,8388606,4194306,6291450,5242882,5242882,5242882, 4194306,4195842,4194818,4195842,4194306,4194310,4194304,4194310,4194306,4587906,4325506,4587906,4194306,4194306,4235266,4243450,4227074],//6
                  [202580,1135444,1069397,1396736,1333418, 1137898,1332842,1135418,1331610,1134798,1331302,1138482,3428786,16244158,0,8248790,7966802,7378778,6328394,4234218,8297002,170506,187930,56],//7
                  [1398101,0,2796202,4194302,0,5225598,526150,2629698, 532584,4727082,532538,2629658,532488,4727050,532490,2629642,532488,4726858,532490,2629706,532488,7872522,122938,65538],//8
                  [13082818,13902874,1419002,7415418, 1847370,12322392,222,14510030,78950,3087410,2100632,7856521,1224604,1050396,1135197,1276112,3373505,6513625,485771,3106849,1010148,6490342,4814946,14156040],//9
                  [1447253,8519680,15338154,2760702,8075148,1700524,4198534, 8083956,4343984,6211642,1068146,8080762,4310322,6133688,6075170,1063264,7434245,7681860,2110334,11219314,9380962,10314984,3673486,16436263],//10
                  [87381,0,174762,524286,919676,1972284,4063260, 8268812,1311781,1319424,1335810,1368608,123960,779272,647179,3727401,812136,402472,1179816,1245224,1648040,3956776,7922600,7987232],//11
                  [267648,262273,3418755,2367619,3416195,270467, 3416195,2367617,3416192,270464,3416193,2367616,3416192,270464,3416192,2367616,3416192,270464,3154048,3940480,1843328,794753,270464,8192],//12
                  [91540,8321,166443,401017,800992,1841248,788515,264224, 276704,1837088,264224,264224,264224,264224,264224,264224,264224,264224,264224,264224,264224,264224,264224,264224],//13
                  [7921607,7913683,2137089,11570596,8654006,10775568, 3411030,6696132,3042449,9366531,10774410,11546816,1711717,13304368,15211288,11370956,8428646,10475378,3604992,157881,11980672,9739945,9804803,9517143],//14
                  [2879490,626880,5870597,4751741,6433609,2517248,6809892, 4669500,7291392,2449564,7405696,5979852,4931268,14826693,408005,930753,1976259,4067137,3874112,1168711,9639233,12730371,9461696,3465153],//15
                  [8208,8215,1057780,1049092,1069820,1626752,1891968,1032362, 3039146,7212160,6841493,2630037,600960,7154090,6367402,8382592,67733,4393109,4196480,8359934,34406,33314,34952,35225],//16
                  [838398,4474880,5327614,5443170,13722400,14627254, 8984722,11132050,10542082,10886558,2343094,8016418,4874154,672170,4853930,4339338,8381434,4470794,4271970,4524070,4282404,4538406,8216546,114688],//17
                  [0,8388607,5141405,4600205,5412005,5276704,5344354,4194306, 4202498,4202562,4202562,4268098,4259906,4524034,4458498,5507074,5507082,5523594,5259402,5259402,5259402,5259274,8388606,0],//18
                  [3277284,1048612,5571237,4292768,4752522,8129550,285952, 1318152,16006144,16056264,7831552,3153864,2096896,4982536,6685440,2231048,2300672,2202376,2144512,2111880,6322368,4257871,30744,14384]];//19

//[start x position, end x position, y position, constantly increasing value to determine position]
var levelEnemies = [[[69,141,217,24441], [33,69,307,15344], [357,375,379,11035],[339,393,433,10662], [141,231,433,10064], [141,231,433,9957], [321,357,145,7095], [69,123,37,4971], [339,411,55,4290], [51,141,145,120]],//0
                    [[87,429,451,16790],[87,429,451,16656],[87,429,451,16520],[87,429,451,16381],[87,429,451,16272],[87,429,451,16129],[231,285,235,9512],[231,285,199,9429],[231,285,163,9338],[411,447,73,240],[411,447,127,153],[411,447,181,78]],//1
                    [[105,159,325,21946],[177,213,343,21714],[231,285,433,20596],[267,411,325,15321],[267,411,325,15237],[267,411,325,15156],[267,411,325,15080],[267,411,325,15009],[285,393,181,0],[285,393,181,40],[285,393,181,80],[285,393,181,120],[105,159,127,1886],[177,213,109,1781],[321,411,109,1345]],//2
                    [[87,411,451,12128],[87,411,451,12025],[87,411,451,11876],[87,411,451,11795],[87,411,451,11717],[303,303,181,812],[375,375,181,694],[357,357,181,665],[339,339,181,639],[321,321,181,619],[285,285,181,579],[267,267,181,516],[249,249,181,485],[231,231,181,438],[213,213,181,406],[195,195,181,375],[177,177,181,347],[159,159,181,315],[141,141,181,284],[123,123,181,242],[105,105,181,214],[87,87,181,189]],//3
                    [[231,357,451,20651],[231,285,415,19938],[321,393,55,16634],[105,195,433,16399],[159,195,271,6542],[357,411,271,3161]],//4
                    [[87,213,361,21073],[87,213,361,20948],[177,231,325,16993],[267,321,361,16764],[177,231,325,15431],[177,177,181,0],[195,195,181,6],[213,213,181,12],[231,231,181,0],[249,249,181,6],[267,267,181,12],[285,285,181,0],[303,303,181,6],[321,321,181,12],[339,339,181,0],[357,357,181,6],[375,375,181,12],[393,393,181,0],[411,411,181,6],[159,159,199,12],[141,141,163,0],[123,123,163,6],[105,105,163,12]],//5
                    [[96,96,415,16867],[114,114,415,16813],[132,132,415,16760],[150,150,415,16707],[168,168,415,16660],[186,186,415,16607],[204,204,415,16559],[222,222,415,16500],[312,312,415,16427],[330,330,415,16388],[348,348,415,16335],[366,366,415,16267],[384,384,415,16232],[402,402,415,16159],[420,420,415,16097],[177,177,253,3954],[213,213,253,3892],[321,321,289,3804],[357,357,289,3746],[321,321,109,3652],[357,357,109,3587],[105,105,415,801],[123,123,415,765],[141,141,415,721],[159,159,415,675],[177,177,415,634],[195,195,415,593],[213,213,415,555],[231,231,415,497],[303,303,415,434],[321,321,415,397],[339,339,415,361],[357,357,415,321],[375,375,415,282],[393,393,415,240],[411,411,415,192]],//6
                   [[96,96,181,55645],[114,114,181,55610],[132,132,181,55573],[150,150,181,55537],[168,168,181,55487],[186,186,181,55437],[204,204,181,50670],[222,222,181,50634],[78,78,181,50495],[60,60,181,50452],[51,231,73,45427],[51,231,73,45338],[51,231,73,45251],[51,231,73,45157],[69,69,181,43534],[87,87,181,43479],[105,105,181,43435],[123,123,181,43389],[141,141,181,43343],[159,159,181,43298],[177,177,181,43250],[195,195,181,43212],[213,213,181,43173],[231,231,181,43126],[321,429,415,30399],[321,429,415,30296],[321,429,451,30085],[321,429,451,29978],[249,249,415,13659],[375,411,271,6617],[83,83,145,3925],[91,91,145,3925],[119,119,145,3880],[127,127,145,3880],[155,155,145,3839],[163,163,145,3839],[191,191,145,3794],[199,199,145,3794],[227,227,145,3741],[235,235,145,3741],[303,303,145,985]],//7
                   [[195,195,379,181]],//8
                   [[159,159,145,26893],[177,177,145,26847],[249,303,73,26544],[249,303,361,25359],[357,411,235,18895],[51,87,253,13382],[285,393,181,9522],[393,447,451,4934],[375,375,433,657]],//9
                   [[321,339,37,12508],[231,285,37,12434],[141,195,37,12339],[339,393,199,12042],[411,411,145,10262],[411,411,181,9970],[321,321,181,9880],[51,105,127,8541],[177,231,235,8289],[339,393,325,8055],[339,429,451,7645],[51,303,451,7535],[51,303,451,7449],[51,303,451,7353],[51,303,451,7265],[321,339,145,5927],[393,411,253,503],[429,447,235,411]],//10
                   [[69,69,451,21726],[267,429,379,5975],[267,429,379,5893],[267,429,379,5827],[267,429,379,5749],[339,339,343,5485],[357,357,343,5459],[375,375,343,5425],[393,393,343,5396],[411,411,343,5367],[429,429,343,5337],[393,393,253,4751],[339,339,253,4709],[321,321,253,4677],[195,231,271,4560],[177,231,109,2020],[267,285,91,1949],[177,231,73,1860],[357,375,127,1358],[357,393,73,1303]],//11
                   [[231,393,451,12139],[69,69,109,884],[87,87,109,809],[105,105,109,755],[123,123,109,711],[141,141,109,668],[159,159,109,622],[177,177,109,576],[195,195,109,540],[213,213,109,496],[231,231,109,457],[249,249,109,413],[267,267,109,378],[285,285,109,335],[303,303,109,300],[321,321,109,249],[339,339,109,210]],//12
                   [],//13
                   [[411,447,73,6313],[393,429,109,6106],[33,87,163,5556],[87,195,235,5441],[87,159,451,4059],[123,123,361,3721],[141,141,325,3653],[105,105,307,3594],[447,447,397,2261],[411,411,379,2210],[447,447,361,2152],[411,411,343,2099],[447,447,325,2043],[411,411,307,2003],[105,159,109,1673]],//14
                   [[393,393,253,4170],[393,393,289,4122],[393,393,325,4057],[231,321,199,3212],[195,267,307,3115],[159,195,181,1728]],//15
                   [[231,285,199,11899],[231,285,199,11844],[285,357,307,11318],[285,357,307,11244],[69,141,73,6283],[159,267,91,6215],[249,357,235,6038],[159,177,343,2053],[159,177,379,2014],[159,177,415,1969],[213,231,361,1912],[213,231,397,1868],[213,231,433,1829],[267,285,343,1779],[267,285,379,1737],[267,285,415,1693],[321,339,361,1634],[321,339,397,1594],[321,339,433,1546]],//16
                   [[69,123,73,21748],[159,213,55,21681],[285,429,37,21576],[213,303,127,19971],[231,267,181,16629],[33,87,235,16009],[393,393,181,13217],[199.5,199.5,217,11320],[181.5,181.5,217,11282],[163.5,163.5,217,11245],[190.5,190.5,217,11058],[172.5,172.5,217,11078],[154.5,154.5,217,11098],[33,33,271,10426],[69,69,271,10372],[141,177,415,1342]],//17
                   [[195,411,415,9677],[213,411,415,9542],[213,411,415,9394],[213,411,415,9196],[195,411,415,9082],[195,411,415,8910],[321,411,379,6134],[321,411,379,6054],[321,411,379,5979],[195,249,325,5348],[195,249,325,5280],[195,249,325,5222],[339,393,307,4916],[339,393,307,4847],[339,393,307,4783],[267,339,235,4104],[267,339,235,4037],[267,339,235,3974],[267,339,235,3860],[177,231,199,3513],[177,231,199,3451],[177,231,199,3381],[339,411,181,3070],[339,411,181,2982],[339,411,181,2899],[339,411,181,2821],[231,267,145,2589],[231,267,145,2480],[267,339,109,2146],[267,339,109,2071],[267,339,109,1983],[303,411,73,1625],[303,411,73,1549],[303,411,73,1464],[303,411,73,1317]],//18
                   [[159,159,109,13017],[177,177,109,12985],[195,195,109,12954],[213,213,109,12916],[267,267,37,1308],[285,285,37,1275],[393,393,37,1219],[411,411,37,1183],[303,375,55,1108],[303,375,55,1039]]];//19

//[start y position, end y position, x position, constantly increasing value to determine position]
var levelFlyers = [[[51,123,51,1851], [177,267,249,906],[267,357,213,441], [285,411,303,248]],//0
                   [[339,447,267,6744],[339,447,303,6744],[339,447,339,6744],[339,447,375,6744],[339,447,411,6744],[141,249,141,1640],[141,249,177,1478],[141,249,213,1354]],//1
                   [[357,375,123,12125],[375,393,141,11971],[393,411,159,11897],[411,429,177,11835],[159,231,123,9081],[213,285,339,306],[213,285,375,253],[213,285,411,168]],//2
                   [[303,357,411,0],[303,357,375,54],[303,357,339,0],[303,357,303,54],[303,357,267,0],[303,357,231,54],[303,357,195,0],[303,357,159,54],[303,357,123,0],[303,357,87,54]],//3
                   [[303,375,411,39833],[303,375,393,39756],[303,375,177,27425],[321,357,231,27364],[87,141,375,14870],[123,267,393,14599],[141,177,141,3809],[141,177,123,3702],[231,393,123,2088],[231,393,141,1930]],//4
                   [[249,285,159,0],[249,285,177,36],[249,285,195,0],[249,285,213,36],[249,285,231,0]],//5
                   [[69,393,303,2231],[177,393,141,1823],[105,213,105,1715],[87,159,411,1592],[87,159,429,1515],[87,159,447,1448],[159,249,339,868],[69,393,231,479]],//6
                  [[105,159,339,18664],[87,159,357,18571],[69,159,375,18500],[249,285,249,16272],[249,321,321,8451],[249,303,357,8170],[303,339,393,0],[303,339,447,0],[303,357,411,0],[303,357,429,0]],//7
                  [],//8
                  [[285,321,177,22222],[285,339,195,22156],[69,105,33,11510],[105,141,87,11439],[141,177,51,11295],[357,375,159,3947],[375,393,177,3878],[393,411,195,3769],[321,375,447,1623]],//9
                  [[105,177,213,14013],[33,51,87,13000],[33,69,123,12900],[33,69,213,12787],[33,69,303,12688],[33,51,357,12586],[123,231,429,11910],[51,123,51,8775],[33,69,33,8698],[285,339,447,7762],[159,447,51,7153],[159,447,51,7055],[159,447,51,6943],[159,447,51,6844],[159,447,51,6742],[339,375,105,6605],[339,375,141,6523],[159,231,69,5275],[159,213,87,5199],[393,411,213,2281],[393,411,249,2205],[339,375,429,1786],[393,411,375,1624]],//10
                  [[159,231,105,4087],[123,159,303,3276],[159,195,339,3206],[267,321,105,2582],[267,339,123,2524],[285,339,249,0],[285,339,267,0],[285,339,285,0],[285,339,303,0]],//11
                  [[267,303,141,10164],[267,303,231,10067],[267,303,321,9828]],//12
                  [[375,447,159,2868],[267,339,213,2547],[141,231,285,2248],[33,105,357,2021],[375,447,213,1567],[267,339,285,1449],[141,231,357,1293],[33,105,429,1138]],//13
                  [[213,303,51,5253],[195,285,303,4943]],//14
                  [[195,285,87,11606],[123,159,87,4839],[249,411,33,1436]],//15
                  [[231,357,33,19459],[123,159,123,6488],[105,177,105,6443],[69,123,339,5957]],//16
                  [[231,411,447,27040],[231,411,447,26930],[231,411,447,26838],[69,105,339,11176],[69,105,375,11069],[69,105,411,10960],[267,303,141,5315],[249,285,123,5242],[231,267,105,5176],[267,339,375,3026],[267,339,375,2807],[267,339,393,2708],[267,339,393,2622]],//17
                  [[69,411,159,2937],[69,411,159,2810],[69,411,159,2661],[69,177,195,2528],[177,303,249,2416],[231,303,213,2312],[357,393,195,2227],[267,393,285,2130],[213,357,411,1987],[105,159,375,1877],[141,213,303,1781],[69,123,249,1677],[69,123,231,1609],[267,357,321,1405],[177,213,267,1125],[213,285,375,880],[231,393,177,432]],//18
                  []];//19

//[x position, y position, bullets given, countdown number to respawn after being taken]
var levelAmmo = [[[159,195,5,0],[339,105,5,0],[285,177,5,0]],//0
                 [[447,357,5,0],[447,375,5,0],[447,393,5,0],[447,411,5,0]],//1
                 [[195,447,5,0],[51,447,5,0],[447,339,5,0],[231,87,5,0],[303,87,5,0],[447,69,5,0],[105,213,5,0]],//2
                 [[447,33,5,0],[429,33,5,0],[411,33,5,0],[393,33,5,0],[375,33,5,0],[357,33,5,0],[339,33,5,0],[321,33,5,0],[303,33,5,0],[285,33,5,0],[267,33,5,0],[249,33,5,0]],//3
                 [[231,213,5,0],[231,231,5,0],[231,249,5,0],[429,195,5,0],[267,339,5,0]],//4
                 [[411,285,5,0],[249,285,5,0],[69,105,5,0],[69,123,5,0],[69,141,5,0],[69,159,5,0],[69,177,5,0],[33,105,5,0],[33,141,5,0],[33,177,5,0]],//5
                 [[339,33,5,0],[267,33,5,0],[195,33,5,0],[123,33,5,0],[51,33,5,0],[33,51,5,0],[33,123,5,0],[33,195,5,0],[33,267,5,0],[33,339,5,0],[33,411,5,0]],//6
                [[249,51,5,0],[231,51,5,0],[231,33,5,0],[249,33,5,0],[213,51,5,0],[213,33,5,0],[249,159,5,0],[33,195,5,0],[393,159,5,0],[411,159,5,0],[429,159,5,0]],//7
                [[177,375,5,0]],//8
                [[285,213,5,0],[105,375,5,0],[177,249,5,0],[87,33,5,0],[429,33,5,0]],//9
                [[231,177,5,0],[447,123,5,0],[447,159,5,0],[429,51,5,0],[429,33,5,0],[105,249,5,0],[123,303,5,0],[177,339,5,0],[357,267,5,0],[447,393,5,0],[105,195,5,0],[105,177,5,0],[123,375,5,0],[87,87,5,0]],//10
                [[141,447,5,0],[159,447,5,0],[141,429,5,0],[159,429,5,0],[123,429,5,0],[123,447,5,0],[105,429,5,0],[105,447,5,0]],//11
                [[69,411,5,0],[87,411,5,0],[105,411,5,0],[123,411,5,0],[141,411,5,0]],//12
                [[51,429,5,0],[87,321,5,0],[87,213,5,0],[105,87,5,0]],//13
                [[69,51,5,0],[267,87,5,0],[375,123,5,0],[375,303,5,0],[231,303,5,0],[123,411,5,0],[33,213,5,0]],//14
                [[195,51,5,0],[375,249,5,0],[357,285,5,0],[339,321,5,0]],//15
                [[33,411,5,0],[87,357,5,0],[159,267,5,0],[69,429,5,0],[69,447,5,0],[87,429,5,0],[87,447,5,0],[105,429,5,0],[105,447,5,0]],//16
                [[69,33,5,0],[429,177,5,0],[321,231,5,0],[141,177,5,0],[105,141,5,0],[87,411,5,0],[393,429,5,0],[213,393,5,0],[303,105,5,0],[33,303,5,0],[447,87,5,0],[231,159,5,0]],//17
                [[33,393,5,0],[33,321,5,0],[33,249,5,0],[33,177,5,0],[33,105,5,0],[87,33,5,0],[195,33,5,0],[303,33,5,0],[411,33,5,0],[447,69,5,0],[447,177,5,0],[447,285,5,0],[447,393,5,0],[393,447,5,0],[303,447,5,0],[213,447,5,0],[123,339,5,0],[105,339,5,0],[123,249,5,0],[105,249,5,0],[123,159,5,0],[105,159,5,0]],//18
                [[141,51,5,0],[393,177,5,0],[429,177,5,0],[411,159,5,0]]];//19

//[x position, y position, amount to push player in horizontal, amount to push player in vertical]
var levelMovers = [[],//0
                   [[321,231,0,-1],[321,195,0,-1],[321,159,0,-1],[321,123,0,-1],[321,87,0,-1]],//1
                   [[69,429,0,-1],[69,339,0,-1],[249,411,0,-1],[159,303,0,-1],[69,249,0,-1],[69,159,0,-1],[267,123,0,-1],[267,87,0,-1]],//2
                   [[447,411,0,-1],[33,321,0,-1],[447,231,0,-1]],//3
                   [[321,177,0,-1],[231,159,0,-1],[69,411,0,-1],[51,357,0,-1],[69,303,0,-1],[51,249,0,-1]],//4
                   [[375,411,0,-1],[447,321,0,-1],[69,321,0,-1],[249,267,0,-1],[447,195,0,-1],[447,141,0,-1],[447,87,0,-1],[375,69,0,-1],[321,69,0,-1],[285,51,0,-1],[249,51,0,-1],[159,69,0,-1],[123,51,0,-1],[105,141,0,-1],[105,105,0,-1]],//5
                   [[267,429,0,-1],[267,411,0,-1],[267,393,0,-1],[177,177,0,-1],[357,177,0,-1],[141,159,0,-1],[393,159,0,-1],[267,141,0,-1],[123,231,0,-1],[105,231,0,-1],[411,393,0,-1],[411,375,0,-1],[411,357,0,-1],[285,303,0,-1],[285,321,0,-1],[195,393,0,-1],[159,357,0,-1],[123,321,0,-1],[123,303,0,-1],[213,123,0,-1],[249,195,0,-1],[213,141,0,-1],[393,339,0,-1]],//6
                  [[429,105,0,-1],[33,123,0,-1],[285,231,0,-1],[447,195,0,-1],[447,159,0,-1],[357,321,0,-1],[285,375,0,-1],[285,429,0,-1],[285,411,0,-1],[285,393,0,-1],[447,231,0,-1],[447,321,0,-1],[447,141,0,-1]],//7
                  [[375,159,0,-1],[321,159,0,-1],[303,159,0,-1],[249,159,0,-1],[231,159,0,-1],[177,159,0,-1],[159,159,0,-1],[141,213,0,-1],[393,159,0,-1],[213,267,1,0],[231,267,1,0],[249,267,1,0],[213,285,1,0],[231,285,1,0],[249,285,1,0],[357,321,-1,0],[357,303,-1,0]],//8
                  [[375,321,0,-1],[141,285,0,-1],[141,267,0,-1]],//9
                  [[321,375,0,-1],[321,357,0,-1]],//10
                  [],//11
                  [[447,429,0,-1],[447,393,0,-1],[447,177,0,-1]],//12
                  [],//13
                  [[321,123,0,-1],[231,285,0,-1],[267,249,0,-1],[321,303,0,-1],[231,141,0,-1]],//14
                  [],//15
                  [[33,429,0,-1],[87,375,0,-1],[159,285,0,-1],[51,339,0,-1],[33,177,0,-1],[33,159,0,-1],[87,249,0,-1],[411,141,0,-1],[411,123,0,-1]],//16
                  [[105,429,0,-1],[105,411,0,-1],[177,375,0,-1],[177,393,0,-1],[51,321,0,-1],[51,429,0,-1],[51,411,0,-1],[393,123,0,-1],[447,429,0,-1],[339,357,0,-1],[339,339,0,-1],[339,303,0,-1],[267,231,0,-1],[267,267,0,-1],[177,321,0,-1],[213,267,0,-1]],//17
                  [[33,429,0,-1],[33,357,0,-1],[33,285,0,-1],[33,213,0,-1],[33,141,0,-1],[33,69,0,-1]],//18
                  [[177,429,0,-1],[177,339,0,-1]]];//19

//[x position, y position, horizontal direction, vertical direction, constantly increasing value to determine when to shoot]
var levelCannons = [[],//0
                    [],//1
                    [[321,357,1,0,90],[321,393,1,0,90],[321,429,1,0,90],[303,267,1,0,59],[285,249,1,0,125],[267,231,1,0,92],[249,213,1,0,54],[429,69,-1,0,17],[87,33,1,0,0],[447,33,-1,0,0]],//2
                    [[393,249,-1,0,33],[357,267,-1,0,155]],//3
                    [[303,339,0,1,161],[321,357,0,1,34],[339,375,0,1,162],[33,411,1,0,26],[87,375,-1,0,157],[33,339,1,0,102],[87,303,-1,0,40],[51,33,0,1,109]],//4
                    [[447,429,-1,0,100],[429,429,-1,0,100],[411,429,-1,0,100],[393,429,-1,0,100]],//5
                    [[87,69,1,0,0],[105,69,1,0,15],[123,69,1,0,30],[141,69,1,0,45],[429,195,-1,0,169],[411,195,-1,0,126]],//6
                   [[321,195,1,0,59],[411,195,-1,0,46],[213,249,0,1,90],[195,249,0,1,9],[177,249,0,1,147],[87,249,0,1,0],[87,267,0,1,0]],//7
                   [],//8
                   [[339,123,-1,0,96],[357,105,-1,0,12],[447,285,0,-1,168],[33,447,1,0,193],[105,411,-1,0,115],[105,159,1,0,74]],//9
                   [[249,69,0,1,105],[177,69,1,0,27],[141,69,0,1,146],[33,195,1,0,48],[33,177,1,0,197],[249,285,-1,0,171],[195,267,0,1,86],[177,303,1,0,186]],//10
                   [[51,33,0,1,30],[51,51,0,1,52],[51,69,0,1,74],[51,87,0,1,96],[51,105,0,1,118],[159,231,1,0,98],[195,195,-1,0,156],[213,177,-1,0,106],[231,159,-1,0,50],[249,141,-1,0,184],[177,51,1,0,126],[303,429,1,0,118],[321,447,1,0,78]],//11
                   [[411,195,-1,0,181],[411,177,-1,0,76]],//12
                   [],//13
                   [[303,51,1,0,119],[357,105,1,0,93],[33,393,1,0,164],[195,285,0,1,69]],//14
                   [[213,447,0,-1,49],[213,429,0,-1,11],[177,447,0,-1,159],[177,429,0,-1,110],[123,447,0,-1,123],[123,429,0,-1,86],[249,33,-1,0,33],[231,33,-1,0,3],[213,33,-1,0,172],[447,105,-1,0,5],[357,123,1,0,143]],//15
                   [[123,249,-1,0,0],[123,267,-1,0,100],[393,141,1,0,80],[447,123,-1,0,60],[447,87,-1,0,20],[393,69,1,0,0],[393,105,1,0,40],[141,159,-1,0,0],[141,141,-1,0,100]],//16
                   [[249,69,1,0,159],[249,87,1,0,109],[213,87,-1,0,198],[105,339,1,0,181],[231,375,1,0,90],[357,411,-1,0,197],[357,231,1,0,36],[33,447,1,0,0],[69,447,1,0,0],[105,447,1,0,0]],//17
                   [],//18
                   [[393,375,-1,0,0],[393,357,-1,0,0]]];//19

var levelBeginAt = [[33,433],//0
                    [33,451],//1
                    [33,451],//2
                    [33,451],//3
                    [231,289],//4
                    [33,451],//5
                    [446,37],//6
                   [411,127],//7
                   [51,451],//8
                   [248,235],//9
                   [195,163],//10
                   [87,451],//11
                   [33,451],//12
                   [33,451],//13
                   [33,37],//14
                   [429,451],//15
                   [33,451],//16
                   [87,37],//17
                   [33,451],//18
                   [33,451]];//19


//[first time limit, difference to each time limit after]
var timeLimits = [[4800,1000],[4000,1000],[5800,700],[5800,1200],[7600,900],[4600,1600],[10000,1000],[7000,3000],[4000,3000],[6000,4000],[11000,1500],[9000,2000],[2500,1000],[2000,1000],[4500,1000],[5000,2000],[5000,2500],[10000,5000],[4500,1500],[4000,1000]];

var bulletLimits = [[14,15,16,17,18],[20,27,34,41,48],[33,35,37,39,41],[34,37,40,43,46],[24,27,30,33,36],[32,33,34,35,36],[50,55,60,65,70],[58,61,64,67,70],[1,1,1,1,2],[24,26,28,30,32],[49,53,57,61,65],[42,44,46,48,50],[22,23,24,25,26],[8,16,24,32,40],[21,23,25,27,29],[20,22,24,26,28],[32,36,40,44,48],[39,42,45,48,51],[52,54,56,58,60],[12,13,14,15,16]];

var levelOrder = [12,0,13,1,4,18,8,2,19,14,3,9,5,16,11,6,15,10,7,17];
var levelMessages = ["Infiltrate and eradicate. It's as simple as that.","Always take a second to look things over before rushing into a level","Target practice","That target practice is about to come in handy","Just a reminder, you are being timed","It's about to be a bloodbath","Must be one important spike","Who needs elevators anyways","Sometimes one bullet is all it takes","Only halfway there. Sadly, it only gets harder from here","Back to basics","Fifteen stars, here we come","One step at a time","They should learn not to put all their guards in one basket","Four cannons are better than five","Let's hope you're good at flying","Ammo is sure getting harder and harder to get these days","Looks like a party in there","Sometimes, the only place to go in an elevator shaft is down","Just one more level. Don't give up now"];
var levelMessageLength = 3000;
var levelMessageStart = 0;


var neatBoard = [];
var board = [];

var boardWidth = 24;
var squareSize = 18;


var showGridlines = false;
var levelOn = 0;
var levelOrderOn = 0;

var createBoard = false;
var blankBoard = false;

var beginAt = [];
var xPos = beginAt[0];
var yPos = beginAt[1];

var playerWidth = 6;
var playerHeight = 10;
var gunPosition = -2;

var horVelocity = 0;
var vertVelocity = 0;

var jumpVelocity = -2;
var fallAcceleration = 0.1;
var walkVelocity = 1;

var playerDirection = 1;
var bullets = [];
var bulletSpeed = 2;
var bulletsLeft = 0;
var shooting = false;
var bulletLength = 3;
var bulletHeight = 2;
var ammoAmount = 5;

var pressingSpace = false;
var pressing = false;

var ammo = [];
var ammoSize = 7;
var ammoWaitTime = 500;

var enemies = [];
var enemySpeed = 1;
var creatingEnemy = [-1,-1];

var flyers = [];
var flySpeed = 1;
var creatingFlyer = [-1,-1];
var flyerSize = 7;

var num = 22;
var cannons = [];
var cannonSpeed = 1;
var creatingCannon = [-1,-1];
var cannonSize = 10;
var cannonBulletSize = 5;
var cannonBullets = [];
var cannonRate = 200;

var movers = [];
var moverSpeed = 0.5;
var moverSize = 10;

var bulletsFired = 0;
var missedBullets = 0;
var deaths = 0;
var framesPassed = 0;
var startTime = 0;
var enemyAmount = 0;

var hasEditedEnemies = false;
var hasEditedBoard = false;
var hasEditedAmmo = false;
var hasEditedFlyers = false;
var hasEditedMovers = false;
var hasEditedCannons = false;

var timeScores = [];
var bulletScores = [];
var deathScores = [];
var bulletStars = 0;
var timeStars = 0;
var deathStars = 0;

var onMainMenu = true;
var onLevelMenu = false;
var onLevelPlay = false;
var onInstructions = false;
var onLevelSelect = false;
var onLevelMessage = false;

var clicking = false;

function setup() {
  createCanvas(480, 480);
  rectMode(CENTER);
  angleMode(DEGREES);
  
  for (var i = 0; i < levelBoards.length; i ++){
    append(timeScores,0);
    append(bulletScores,0);
    append(deathScores,0);
  }
  
  if (levelOn >= 0){
    createLevel();
  }
  else if (createBoard){
    for (var i = 0; i < boardWidth; i ++){
      append(board,[]);
      for (var x = 0; x < boardWidth; x ++){
        if (blankBoard){
          append(board[i],0);
        }else{
          append(board[i],random([0,1]));
        }
      }
    }
  }
  
  if (board.length == 0){
    for (var i = 0; i < neatBoard.length; i ++){
      append(board,numToBinary(neatBoard[i]));
    }
  }
  
}





function draw() {
  background(220);
  
  if (onMainMenu){
    push();
    fill(255);
    strokeWeight(3);
    square(240,240,450);
    stroke(0);
    
    textSize(30);
    fill(0);
    strokeWeight(1);
    textAlign(CENTER,CENTER);
    text("INFILTRATE",240,100);
    
    textSize(20);
    if (makeButton(240,300,170,50,"INSTRUCTIONS")){
      onInstructions = true;
      onMainMenu = false;
    }else if (makeButton(240,360,170,50,"BEGIN")){
      onLevelMessage = true;
      levelMessageStart = millis();
      levelOrderOn = 0;
      levelOn = levelOrder[levelOrderOn];
      createLevel();
      onMainMenu = false;
    }else if (makeButton(240,420,170,50,"LEVELS")){
      onLevelSelect = true;
      onMainMenu = false;
    }
    
    pop();
  }
  
  if (onInstructions){
    push();
    
    stroke(0);
    textAlign(CENTER,CENTER);
    fill(255);
    strokeWeight(3);
    square(240,240,450);
    
    fill(0);
    //noStroke();
    strokeWeight(0.5);
    textSize(13);
    text("Your goal is to infiltrate each level and eradicate all enemies. Use the arrow keys to move and the space bar to shoot. You can collect five bullets from the blue ammo boxes. \n\nThere are four types of enemies: guards, drones, cannons, and spikes. Guards move similarly to you, and walk along set paths. Drones fly vertically. Cannons shoot deadly bullets. Spikes do not move, but are still dangerous, and must still be eradicated. If you are killed by an enemy, you will lose all of your ammo and return to your starting position.\n\nOn each level, you are given a score on time, bullets fired, and deaths. You can get five stars in each category if you finish a level quickly, fire as few bullets as possible, and never die.",240,240,420,420);
    
    textSize(20);
    if (makeButton(240,400,170,50,"MENU")){
      onInstructions = false;
      onMainMenu = true;
    }
    
    pop();
  }
  
  if (onLevelSelect){
    push();
    stroke(0);
    textAlign(CENTER,CENTER);
    fill(255);
    strokeWeight(3);
    square(240,240,450);
    var levelSelected = -1;
    var hor = 80;
    for (var i = 0; i < timeScores.length; i ++){
      strokeWeight(3);
      var bXPos = (240-2*hor)+hor*(i%5);
      var bYPos = 70+90*floor(i/5);
      if (makeButton(bXPos,bYPos,55,25,i+1)){
        levelSelected = i;
      }
      strokeWeight(1);
      var levelScores = [timeScores[levelOrder[i]],bulletScores[levelOrder[i]], deathScores[levelOrder[i]]];
      for (var b = 0; b < levelScores.length; b ++){
        for (var x = 0; x < 5; x ++){
          fill(0);
          if (levelScores[b] > x){
            fill(255,255,0);
          }
          drawStar(bXPos-30+15*x,bYPos+20+10*b,5,2,5);
        }
      }
    }
    
    if (levelSelected >= 0){
      onLevelSelect = false;
      levelOrderOn = levelSelected
      levelOn = levelOrder[levelOrderOn];
      createLevel();
      onLevelMessage = true;
      levelMessageStart = millis();
    }
    
    pop();
  }
  
  if (onLevelMessage){
    push();
    fill(255);
    strokeWeight(3);
    square(240,240,450);
    textSize(25);
    fill(0);
    textAlign(CENTER,CENTER);
    strokeWeight(1);
    stroke(0);
    text("Level " + (levelOrderOn+1) + "\n\n" + levelMessages[levelOrderOn],240,240,450,450);
    if (millis()-levelMessageStart > levelMessageLength){
      onLevelMessage = false;
      onLevelPlay = true;
    }
    pop();
  }
  
  if (onLevelMenu){
    fill(255);
    strokeWeight(3);
    square(240,240,450);
    
    fill(255,255,0);
    
    var scoreMessages = ["Time Score:","Bullets Score:","Death Score:"];
    var stars = [timeStars,bulletStars,deathStars];
    var previousScores = [timeScores[levelOn],bulletScores[levelOn],deathScores[levelOn]];
    
    textAlign(LEFT,CENTER);
    textSize(20);
    strokeWeight(2);
    for (var i = 0; i < scoreMessages.length; i ++){
      fill(0);
      strokeWeight(1);
      text(scoreMessages[i],25,50+i*50);
      for (var x = 1; x <= 5; x ++){
        if (x <= stars[i]){
          fill(255,255,0);
        }else if (x <= previousScores[i]){
          fill(100,100,0);
        }else{
          fill(0);
        }
        
        strokeWeight(2);
        drawStar(140+50*x,50+i*50,12.5,5,5);
      }
    }
    
    textAlign(CENTER,CENTER);
    
    var leaving = false;
    var levelWasOn = levelOn;
    if (levelOrderOn < levelBoards.length-1 && makeButton(240,350,140,50,"CONTINUE")){
      levelOrderOn ++;
      levelOn = levelOrder[levelOrderOn];
      
      createLevel();
      onLevelMenu = false;
      onLevelMessage = true;
      levelMessageStart = millis();
      leaving = true;
    }else if (makeButton(240,410,140,50,"MENU")){
      onMainMenu = true;
      onLevelMenu = false;
      leaving = true;
    }
    
    if (leaving){
      if (timeStars > timeScores[levelWasOn]){
        timeScores[levelWasOn] = timeStars;
      }
      if (bulletStars > bulletScores[levelWasOn]){
        bulletScores[levelWasOn] = bulletStars;
      }
      if (deathStars > deathScores[levelWasOn]){
        deathScores[levelWasOn] = deathStars;
      }
    }
    
    textSize(12);
    
  }
  
  if (onLevelPlay){
    
    push();
    fill(0);
    textAlign(LEFT,CENTER);
    textSize(15);
    
    text("Level " + (levelOrderOn+1),24,15);
    
    text("Bullets left: " + bulletsLeft,120,15);
    
    text("Time:",24,468);
    text("Bullets:",164,468);
    text("Deaths:",312,468);
    
    stroke(0);
    fill(255,255,0);
    //strokeWeight(2);
    var starSize = 1.3;
    for (var i = 0; i < 5; i ++){
      var scoreVal = 4-i;
      if (framesPassed <= timeLimits[levelOn][0] + i*timeLimits[levelOn][1]){
        drawStar(75+18*scoreVal,468,5*starSize,2*starSize,5);
      }
      if (enemyAmount + missedBullets <= bulletLimits[levelOn][i]){
        drawStar(225+18*scoreVal,468,5*starSize,2*starSize,5);
      }
      if (deaths <= i){
        drawStar(375+18*scoreVal,468,5*starSize,2*starSize,5);
      }
    }
    
    pop();
    
    
    push();
    textAlign(CENTER,CENTER);
    strokeWeight(1);
    textSize(11);
    if (makeButton(410,12,17,17,"R")){
      resetPlayer();
    }
    if (makeButton(444,12,17,17,"M")){
      onLevelPlay = false;
      onMainMenu = true;
    }
    
    pop();
    
    
    if (levelOn >= 0){
      if (enemies.length == 0 && flyers.length == 0 && cannons.length == 0){
        
        
        bulletStars = 5;
        timeStars = 5;
        deathStars = 0;
        for (var b = 5; b >= 0; b --){
          if (bulletsFired <= bulletLimits[levelOn][b]){
            bulletStars = b;
          }
          if (framesPassed <= timeLimits[levelOn][0] + b*timeLimits[levelOn][1]){
            timeStars = b;
          }
        }
        bulletStars = 5-bulletStars;
        timeStars = 5-timeStars;
        deathStars = 5-deaths;
        if (deathStars < 0){
          deathStars = 0;
        }
        
        console.log("Level ID: " + levelOn + "\n Bullets Fired: " + bulletsFired + " -- " + bulletStars + " stars\n Deaths: " + deaths + " -- " + deathStars + " stars\n Frames Passed: " + framesPassed + " -- " + timeStars + " stars");
        
        
        onLevelMenu = true;
        onLevelPlay = false;
      }
    }
    framesPassed ++;
    
    
    if (keyIsDown(RIGHT_ARROW)){
      horVelocity = walkVelocity;
      playerDirection = 1;
    }else if (keyIsDown(LEFT_ARROW)){
      horVelocity = -walkVelocity;
      playerDirection = -1;
    }
    if (keyIsDown(32) && !shooting && bulletsLeft > 0){
      shooting = true;
      bulletsLeft --;
      bulletsFired ++;
      append(bullets,[xPos,yPos+gunPosition,playerDirection*bulletSpeed]);
    }else if (shooting && !keyIsDown(32)){
      shooting = false;
    }
    
    if (keyIsDown(UP_ARROW) && vertVelocity == 0){
      vertVelocity = jumpVelocity;
    }
    vertVelocity += fallAcceleration;
    
    if (abs(240-(xPos+horVelocity)) > 0.5*boardWidth*squareSize-0.5*playerWidth){
      horVelocity = 0;
    }
    if (abs(240-(yPos+vertVelocity)) > 0.5*boardWidth*squareSize-0.5*playerHeight){
      vertVelocity = 0;
      if (yPos < 240){
        vertVelocity = fallAcceleration;
      }
    }
    
    //movers moving
    for (var i = 0; i < movers.length; i ++){
      if (abs(movers[i][0]-xPos) < 0.5*(moverSize+playerWidth) && abs(movers[i][1]-yPos) < 0.5*(moverSize+playerHeight)){
        if (movers[i][2] != 0){
          horVelocity += moverSpeed*movers[i][2];
        }
        if (movers[i][3] != 0){
          vertVelocity += moverSpeed*movers[i][3];
        }
      }
    }
    
    printBoard(240,240,boardWidth,boardWidth,squareSize,0);
    if (creatingEnemy[0] >= 0){
      fill(255,0,0);
      circle(creatingEnemy[0],creatingEnemy[1],5);
    }
    if (creatingFlyer[0] >= 0){
      fill(255,0,0);
      circle(creatingFlyer[0],creatingFlyer[1],5);
    }
    if (creatingCannon[0] >= 0){
      fill(255,0,0);
      circle(creatingCannon[0],creatingCannon[1],5);
    }
    
    
    //Enemies
    fill(255,0,0);
    for (var i = enemies.length-1; i >= 0; i --){
      enemies[i][3] += enemySpeed;
      
      var enemyX;
      
      if (enemies[i][0] == enemies[i][1]){//spikes
        enemyX = enemies[i][0];
        triangle(enemies[i][0]-0.5*playerWidth,enemies[i][2]+0.5*playerHeight,enemies[i][0]+0.5*playerWidth,enemies[i][2]+0.5*playerHeight,enemies[i][0],enemies[i][2]-0.5*playerHeight-0.2*playerHeight*sin(enemies[i][3]*10));
      }else{//walking
        
        enemyX = enemies[i][3] % (2*(enemies[i][1]-enemies[i][0]));
        if (enemyX > enemies[i][1] - enemies[i][0]){
          enemyX = enemies[i][1]-(enemyX-(enemies[i][1]-enemies[i][0]));;
        }else{
          enemyX += enemies[i][0];
        }
        rect(enemyX,enemies[i][2],playerWidth,playerHeight);
      }
      
      if (abs(enemyX-xPos) < playerWidth && abs(enemies[i][2]-yPos) < playerHeight){
        resetPlayer();
      }
        
      for (var a = bullets.length-1; a >= 0; a --){
        if (abs(bullets[a][0]-enemyX) < 0.5*(playerWidth+bulletLength) && abs(bullets[a][1]-enemies[i][2]) < 0.5*(playerHeight+bulletHeight)){
          bullets.splice(a,1);
          enemies.splice(i,1);
        }
      }
      
      
    }
    
    //Flyers
    for (var i = flyers.length-1; i >= 0; i --){
      flyers[i][3] += flySpeed;
      var enemyY = flyers[i][3] % (2*(flyers[i][1]-flyers[i][0]));
      if (enemyY > flyers[i][1] - flyers[i][0]){
        enemyY = flyers[i][1]-(enemyY-(flyers[i][1]-flyers[i][0]));
      }else{
        enemyY += flyers[i][0];
      }
      square(flyers[i][2],enemyY,flyerSize);
      
      if (abs(enemyY-yPos) < 0.5*(playerHeight+flyerSize) && abs(flyers[i][2]-xPos) < 0.5*(playerWidth+flyerSize)){
        
        resetPlayer();
      }
      
      
      var hitIt = false;
      for (var a = bullets.length-1; a >= 0; a --){
        if (abs(bullets[a][0]-flyers[i][2]) < 0.5*(flyerSize+bulletLength) && abs(bullets[a][1]-enemyY) < 0.5*(flyerSize+bulletHeight)){//flyers[i][2] crashed here
          bullets.splice(a,1);
          hitIt = true;
        }
      }
      
      if (hitIt){
        flyers.splice(i,1);
      }
      
    }
    
    //bullets
    fill(0,0,255);
    noStroke();
    for (var i = bullets.length-1; i >= 0; i --){
      rect(bullets[i][0],bullets[i][1],bulletLength,bulletHeight);
      bullets[i][0] += bullets[i][2];
      if (abs(240-bullets[i][0]) > 0.5*(squareSize*boardWidth-bulletLength)){
        bullets.splice(i,1);
        missedBullets ++;
      }
    }
    
    
    //cannonBullets
    fill(255,0,0);
    for (var i = cannonBullets.length-1; i >= 0; i --){
      square(cannonBullets[i][0],cannonBullets[i][1],cannonBulletSize);
      cannonBullets[i][0] += cannonBullets[i][2];
      cannonBullets[i][1] += cannonBullets[i][3];
      
      if (abs(cannonBullets[i][0]-xPos) < 0.5*(cannonBulletSize+playerWidth) && abs(cannonBullets[i][1]-yPos) < 0.5*(cannonBulletSize+playerHeight)){
        /*xPos = beginAt[0];
        yPos = beginAt[1];
        bulletsLeft = 0;*/
        resetPlayer();
        cannonBullets.splice(i,1);
      }else if (abs(240-cannonBullets[i][0]) > 0.5*(squareSize*boardWidth-cannonBulletSize) || abs(240-cannonBullets[i][1]) > 0.5*(squareSize*boardWidth-cannonBulletSize)){
        cannonBullets.splice(i,1);
      }
    }
    
    stroke(0);
    
    //ammo
    fill(100,100,255);
    for (var i = ammo.length-1; i >= 0; i --){
      if (ammo[i][3] == 0){
        square(ammo[i][0],ammo[i][1],ammoSize);
        if (abs(ammo[i][0]-xPos) < 0.5*(ammoSize+playerWidth) && abs(ammo[i][1]-yPos) < 0.5*(ammoSize+playerHeight)){
          bulletsLeft += ammo[i][2];
          ammo[i][3] = ammoWaitTime;
        }
      }else{
        ammo[i][3] --;
      }
    }
    
    //movers
    for (var i = movers.length-1; i >= 0; i --){
      //square(movers[i][0],movers[i][1],moverSize);
      if (movers[i][2] == 0){
        line(movers[i][0],movers[i][1]+movers[i][3]*0.3*moverSize,movers[i][0]+0.3*moverSize,movers[i][1]-movers[i][3]*0.3*moverSize);
        line(movers[i][0],movers[i][1]+movers[i][3]*0.3*moverSize,movers[i][0]-0.3*moverSize,movers[i][1]-movers[i][3]*0.3*moverSize);
      }else if (movers[i][3] == 0){
        line(movers[i][0]+movers[i][2]*0.3*moverSize,movers[i][1],movers[i][0]-movers[i][2]*0.3*moverSize,movers[i][1]+0.3*moverSize);
        line(movers[i][0]+movers[i][2]*0.3*moverSize,movers[i][1],movers[i][0]-movers[i][2]*0.3*moverSize,movers[i][1]-0.3*moverSize);
      }
    }
    
    
    //cannons
    fill(155,20,20);
    for (var i = cannons.length-1; i >= 0; i --){
      square(cannons[i][0],cannons[i][1],cannonSize);
      cannons[i][4] ++;
      if (cannons[i][4] == cannonRate){
        cannons[i][4] = 0;
        append(cannonBullets,[cannons[i][0],cannons[i][1],cannons[i][2],cannons[i][3]]);
      }
      var killIt = false;
      for (var a = bullets.length-1; a >= 0; a --){
        if (abs(bullets[a][0]-cannons[i][0]) < 0.5*(bulletLength+cannonSize) && abs(bullets[a][1]-cannons[i][1]) < 0.5*(bulletHeight+cannonSize)){
          bullets.splice(a,1);
          killIt = true;
        }
      }
      if (killIt){
        cannons.splice(i,1);
      }
    }
    
    xPos += horVelocity;
    horVelocity = 0;
    yPos += vertVelocity;
    
    fill(0,255,0);
    rect(xPos,yPos,playerWidth,playerHeight);
  }
}


function resetPlayer(){
  //return true;
  xPos = beginAt[0];
  yPos = beginAt[1];
  vertVelocity = 0;
  horVelocity = 0;
  bulletsLeft = 0;
  for (var m = 0; m < ammo.length; m ++){
    ammo[m][3] = 0;
  }
  deaths ++;
}


function printBoard(xCenter,yCenter,wAmount,hAmount,size,buffer){
  rectMode(CENTER);
  if (!showGridlines){
    noStroke();
  }
  for (var i = 0; i < wAmount; i ++){
    for (var x = 0; x < hAmount; x ++){
      if (board[i][x] == 0){
        fill(255);
      }else if (board[i][x] == 1){
        fill(0);
      }
      
      var squareX = 240-(wAmount-1)*(size+buffer)/2+i*(size+buffer);
      var squareY = 240-(hAmount-1)*(size+buffer)/2+x*(size+buffer);
      
      if (board[i][x] == 1){
        for (var a = bullets.length-1; a >= 0; a --){
          if (abs(bullets[a][0]+bullets[a][2]-squareX) < 0.5*(size+bulletLength) && abs(bullets[a][1]-squareY) < 0.5*(size+bulletHeight)){
            bullets.splice(a,1);
            missedBullets ++;
          }
        }
        for (var a = cannonBullets.length-1; a >= 0; a --){
          if (abs(cannonBullets[a][0]+cannonBullets[a][2]-squareX) < 0.5*(size+cannonBulletSize) && abs(cannonBullets[a][1]+cannonBullets[a][3]-squareY) < 0.5*(size+cannonBulletSize)){
            cannonBullets.splice(a,1);
          }
        }
      }
      
      
      
      if (board[i][x] == 1){
        if (abs(squareX-(xPos+horVelocity)) < 0.5*(size+playerWidth) && abs(yPos-squareY) < 0.5*(size+playerHeight)){
          horVelocity = 0;
        }
        if (abs(squareY-(yPos+vertVelocity)) < 0.5*(size+playerHeight) && abs(xPos-squareX) < 0.5*(size+playerWidth)){
          vertVelocity = 0;
          if (yPos > squareY){
            vertVelocity = fallAcceleration;
          }
        }
      }
      
      square(squareX,squareY,size);
      
      
      
    }
  }
  stroke(0);
  strokeWeight(3);
  noFill();
  rect(240,240,wAmount*size,hAmount*size);
  strokeWeight(1);
}

//inputs integer value
//outputs array of binary value - [0,1,1,0,1,0]
function numToBinary(num){
  var topPow = boardWidth;
  var answer = [];
  var stop = false;
  
  topPow --;
  for (var bi = topPow; bi >= 0; bi --){
    if (num >= pow(2,bi)){
      num -= pow(2,bi);
      append(answer,1);
    }else{
      append(answer,0);
    }
  }
  return answer;
}

//inputs array of binary value - [0,1,1,0,1,0]
//outputs integer value
function binaryToNum(biArray){
  var answer = 0;
  for (var bi = 0; bi < biArray.length; bi ++){
    answer += pow(2,biArray.length-bi-1)*biArray[bi];
  }
  return answer;
}


function copyArray(array){
  var copiedArray;
  if (array.length >= 0){
    copiedArray = [];
    for (var i = 0; i < array.length; i ++){
      append(copiedArray,copyArray(array[i]));
    }
  }else{
    copiedArray = array;
  }
  return copiedArray;
}

function createLevel(){
  neatBoard = levelBoards[levelOn];
  board = [];
  for (var i = 0; i < neatBoard.length; i ++){
    append(board,numToBinary(neatBoard[i]));
  }
  
  enemies = copyArray(levelEnemies[levelOn]);
  flyers = copyArray(levelFlyers[levelOn]);
  movers = copyArray(levelMovers[levelOn]);
  ammo = copyArray(levelAmmo[levelOn]);
  cannons = copyArray(levelCannons[levelOn]);
  beginAt = levelBeginAt[levelOn];
  xPos = beginAt[0];
  yPos = beginAt[1];
  bulletsLeft = 0;
  bullets = [];
  cannonBullets = [];
  
  bulletsFired = 0;
  missedBullets = 0;
  deaths = 0;
  framesPassed = 0;
  startTime = millis();
  enemyAmount = enemies.length + flyers.length + cannons.length;
}

function drawStar(starX,starY,pointRadius,cornerRadius,pointAmount){
  var startAngle = -20;
  beginShape();
  for (var i = 0; i < pointAmount; i ++){
    vertex(starX+pointRadius*cos(i*360/pointAmount+startAngle), starY+pointRadius*sin(i*360/pointAmount+startAngle));
    vertex(starX+cornerRadius*cos((i+0.5)*360/pointAmount+startAngle),starY+cornerRadius*sin((i+0.5)*360/pointAmount+startAngle));
  }
  endShape(CLOSE);
}

function makeButton(buttonX,buttonY,bWidth,bHeight,bText){
  fill(255);
  var beingClicked = false;
  if (clicking && !mouseIsPressed){
    clicking = false;
  }
  if (abs(mouseX-buttonX) < bWidth*0.5 && abs(mouseY-buttonY) < bHeight*0.5){
    fill(200);
    if (mouseIsPressed && !clicking){
      clicking = true;
      beingClicked = true;
      bWidth -= 2;
      bHeight -= 2;
    }
  }
  strokeWeight(3);
  rect(buttonX,buttonY,bWidth,bHeight);
  fill(0);
  strokeWeight(1);
  text(bText,buttonX,buttonY);
  return beingClicked;
}



